@using SpartezSoftware.Synchronizer.Controllers
@{
    string id = @Model.GetType().GetProperty("Id").GetValue(Model);
}

<div id="@id" class="@Model.GetType().GetProperty("Class").GetValue(Model)">
    <h1>TFS Connection</h1>

    <div class="tfs4jira-fieldgroup">
        <div id="tfs-readonly-url" class="readonly-value"></div>
    </div>
    <div class="tfs4jira-fieldgroup-checkbox">
        <input type="checkbox" id="tfs-is-hosted">
        <label for="tfs-is-hosted">Azure DevOps Services</label>
        <div class="tfs4jira-field-error"></div>
        <div class="tfs4jira-field-description">
            Check this option if you want to connect with Azure DevOps Services (formerly VSTS).
        </div>
    </div>
    <div class="tfs4jira-fieldgroup">
        <label for="tfs-login" class="only-for-tfs-server">User Name</label>
        <label for="tfs-login" class="only-for-tfs-cloud">Email Address</label>
        <input id="tfs-login" />
        <div class="tfs4jira-field-error"></div>
    </div>
    <div class="tfs4jira-fieldgroup">
        <label for="tfs-password" class="only-for-tfs-server">Password</label>
        <label for="tfs-password" class="only-for-tfs-cloud">Personal Access Token</label>
        <input id="tfs-password" type="password" />
        <div class="tfs4jira-field-error"></div>
        <div id="tfs-visualstudio-hint" class="tfs4jira-field-description api-token-description">
            @HelpHelpers.LinkToTfsPersonalAccessTokenDocumentation("How to generate Personal Access Token?") <br />
        </div>
    </div>
    <div class="tfs4jira-fieldgroup tfs-domain-fieldgroup">
        <label for="tfs-login">Domain</label>
        <input id="tfs-domain" />
        <div class="tfs4jira-field-error"></div>
        <div class="tfs4jira-field-description">Leave the field empty, if your TFS server is not in any domain.</div>
    </div>
</div>

<script>
    $(function () {
        $('#@id').on("@NavigationEvents.ActivateView", function activateView(event, parameters) {
            $("#tfs-login").focus();
            $("#tfs-readonly-url").text(synchronizationProfile.TfsUrl);
            $("#tfs-login").val(synchronizationProfile.TfsUser);
            $("#tfs-domain").val(synchronizationProfile.TfsDomain);
            $("#tfs-password").val(synchronizationProfile.TfsPassword);
            $("#tfs-is-hosted")[0].checked = synchronizationProfile.HostedTfs;
            changeViewDependingOnDeploymentType(synchronizationProfile.HostedTfs);
        });

        $('#@id').on("@NavigationEvents.NextButtonClicked", function nextButtonClicked() {
            if (validate()) {
                saveFocusedElement();

                synchronizationProfile.TfsUser = $("#tfs-login").val().trim();
                synchronizationProfile.TfsDomain = $("#tfs-domain").val().trim();
                synchronizationProfile.TfsPassword = $("#tfs-password").val();
                synchronizationProfile.HostedTfs = $("#tfs-is-hosted")[0].checked;

                SaveModel().done(function() {
                    testConnection()
                        .done(function testSuccessedAfterNextButtonClicked() {
                            SaveModelAndGoToNextStep();
                        });
                    window.Spartez.Shared.sendNotification(
                        'WizardSide', {
                            profileDataToOverride:{
                            TfsUrl: synchronizationProfile.TfsUrl,
                            TfsUser: synchronizationProfile.TfsUser,
                            TfsDomain: synchronizationProfile.TfsDomain,
                            TfsPassword: synchronizationProfile.TfsPassword,
                            HostedTfs: synchronizationProfile.HostedTfs,
                            tfsDirty: true
                            }
                        }
                    );
                });
            }
        });

        $('#@id').on("@NavigationEvents.TestButtonClicked", function testButtonClicked() {
            if (validate()) {
                saveFocusedElement();

                synchronizationProfile.TfsUser = $("#tfs-login").val().trim();
                synchronizationProfile.TfsDomain = $("#tfs-domain").val().trim();
                synchronizationProfile.TfsPassword = $("#tfs-password").val();
                synchronizationProfile.HostedTfs = $("#tfs-is-hosted")[0].checked;

                SaveModel().done(function() {
                    testConnection()
                        .done(function testSuccessed() {
                            infoDialog('body', 'Success! TFS server location and credentials seem to be fine.', restoreFocus);
                        });
                    window.Spartez.Shared.sendNotification(
                        'WizardSide', {
                            profileDataToOverride: {
                                TfsUrl: synchronizationProfile.TfsUrl,
                                TfsUser: synchronizationProfile.TfsUser,
                                TfsDomain: synchronizationProfile.TfsDomain,
                                TfsPassword: synchronizationProfile.TfsPassword,
                                HostedTfs: synchronizationProfile.HostedTfs,
                                tfsDirty: true
                            }
                        }
                    );
                });
            }
        });

        $("#tfs-is-hosted").change(function() {
            const discoveredTfsDeploymentType = window.Spartez.Shared.discoveredTfsDeploymentType;
            if (discoveredTfsDeploymentType) {
                const newCheckboxValue = $(this).is(":checked");
                const discoveredIsCloudTfs = (discoveredTfsDeploymentType === 'cloud');
                if (newCheckboxValue !== discoveredIsCloudTfs) {
                    const reallyWantToChange = confirm(getCloudCheckboxChangeConfirmationText(discoveredIsCloudTfs));
                    if (!reallyWantToChange) {
                        $(this)[0].checked = discoveredIsCloudTfs;
                    }
                }
            }
            let finalCheckboxValue = $(this).is(":checked");
            changeViewDependingOnDeploymentType(finalCheckboxValue);
        });

        function changeViewDependingOnDeploymentType(isHostedTfs) {
            if (isHostedTfs) {
                $('.tfs4jira-fieldgroup .only-for-tfs-server').hide();
                $('.tfs4jira-fieldgroup .only-for-tfs-cloud').fadeIn();
                $('.tfs4jira-fieldgroup .api-token-description').slideDown();
                $('.tfs4jira-fieldgroup.tfs-domain-fieldgroup').slideUp();
            } else {
                $('.tfs4jira-fieldgroup .only-for-tfs-server').fadeIn();
                $('.tfs4jira-fieldgroup .only-for-tfs-cloud').hide();
                $('.tfs4jira-fieldgroup .api-token-description').slideUp();
                $('.tfs4jira-fieldgroup.tfs-domain-fieldgroup').slideDown();
            }
        }

        function validate() {
            var login = $("#tfs-login").val().trim();
            var password = $("#tfs-password").val();

            var isValid = true;

            if (_.isEmpty(login)) {
                setFieldError("tfs-login", "Please provide user name.");
                isValid = false;
            } else {
                clearFieldError("tfs-login");
            }

            if (_.isEmpty(password)) {
                setFieldError("tfs-password", "Please provide user password.");
                isValid = false;
            } else {
                clearFieldError("tfs-password");
            }

            return isValid;
        }

        function testConnection() {
            var url = encodeURIComponent(synchronizationProfile.TfsUrl);
            var login = encodeURIComponent($("#tfs-login").val().trim());
            var domain = encodeURIComponent($("#tfs-domain").val().trim());
            var password = encodeURIComponent($("#tfs-password").val());
            var hostedTfs = $("#tfs-is-hosted")[0].checked;

            return blockingAjax({
                url: '@Url.Action("TestTfs", "Tfs")?_=' + new Date().getTime(),
                data: 'hostedtfs=' + hostedTfs + '&user=' + login + '&domain=' + domain + '&password=' + password + '&url=' + url
            });
        }

        function getCloudCheckboxChangeConfirmationText(discoveredIsCloudTfs) {
            if (discoveredIsCloudTfs) {
                return `We discovered that ${synchronizationProfile.TfsUrl} is an Azure DevOps Services instance, and this checkbox should be checked.\n\n` +
                    `Please confirm if you really want to change it?`;
            } else {
                return `We discovered that ${synchronizationProfile.TfsUrl} is an On-Premise TFS instance, and this checkbox should be unchecked.\n\n` +
                    `Please confirm if you really want to change it?`;
            }
        }
    });
</script>