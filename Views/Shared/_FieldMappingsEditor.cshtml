@using SpartezSoftware.Synchronizer.Services
@model SpartezSoftware.Synchronizer.Domain.Entity.SyncProfile

<script src="@Url.Content("~/Scripts/fieldselectors/jquery.fieldsel.js")" type="text/javascript"></script>

<div id="messages"></div>

<div id="profileguid" style="display:none;">@Model.Guid</div>

<div class="mappings-container">
    @if (Model != null) {

        bool isBasicEditor = Request.Params["basic"] != null;
        bool isOtherFieldsEditor = Request.Params["otherfields"] != null;
        bool isLinksEditor = Request.Params["links"] != null;
        bool isHierarchyEditor = Request.Params["hierarchy"] != null;
        bool isTypesEditor = Request.Params["types"] != null;
        bool isStatesEditor = Request.Params["states"] != null;

        <ul class="edit-mappings">
            <li class="@(isBasicEditor ? "current" : "regular")">
                @Html.ActionLink("Basic Settings", "Index", "Tfs", new { id = Model.Guid, mappings = 1, basic = 1 }, new { id = "fields-basic" })
            </li>
            <li class="@(isTypesEditor ? "current" : "regular")">
                @Html.ActionLink("Types", "Index", "Tfs", new { id = Model.Guid, mappings = 1, types = 1 }, new { id = "fields-types" })
            </li>
            <li class="@(isStatesEditor ? "current" : "regular")">
                @Html.ActionLink("States and Statuses", "Index", "Tfs", new { id = Model.Guid, mappings = 1, states = 1 }, new { id = "fields-states" })
            </li>
            <li class="@(isOtherFieldsEditor ? "current" : "regular")">
                @Html.ActionLink("Fields", "Index", "Tfs", new { id = Model.Guid, mappings = 1, otherfields = 1 }, new { id = "fields-other" })
            </li>
            <li class="@(isHierarchyEditor ? "current" : "regular")">
                @Html.ActionLink("Hierarchy", "Index", "Tfs", new { id = Model.Guid, mappings = 1, hierarchy = 1 }, new { id = "fields-hierarchy" })
            </li>
            <li class="@(isLinksEditor ? "current" : "regular")">
                @Html.ActionLink("Links", "Index", "Tfs", new { id = Model.Guid, mappings = 1, links = 1 }, new { id = "fields-links" })
            </li>
        </ul>

        <div class="sections">
            @if (isBasicEditor) {
                Html.RenderPartial("Mappings/_BasicSettings", Model);
            } else if (isOtherFieldsEditor) {
                Html.RenderPartial("Mappings/_OtherFields", Model);
            } else if (isLinksEditor) {
                Html.RenderPartial("Mappings/_Links", Model);
            } else if (isHierarchyEditor) {
                Html.RenderPartial("Mappings/_Hierarchy", Model);
            } else if (isTypesEditor) {
                Html.RenderPartial("Mappings/_Types", Model);
            } else if (isStatesEditor) {
                Html.RenderPartial("Mappings/_States", Model);
            }
        </div>
    }

</div>


<div id="tfsfmehelp" style="display:none;">
    @{Html.RenderPartial("Help/Help_EditProfileFieldMappings");}
</div>

<script type="text/javascript">

    var mappings = [];
    var availableFields = {};
    var attachmentMapping = 0;
    var remoteLinksMapping = 0;
    var commentMapping = 0;
    var subtaskSyncDirection = 0;
    var syncDirection = 0;
    var subtaskLinkTypes = null;
    var subtaskLinkType = null;

    isInMappings = function(field, which) {
        for (var i = 0; i < mappings.length; ++i) {
            if (mappings[i][which] === field) return true;
        }
        return false;
    };

    fillAvailableFields = function () {
        $('#jirafields').html('');
        $('#tfsfields').html('');
        for (var i = 0; i < availableFields.jiraFields.length; ++i) {
            if (availableFields.jiraFields[i].Key != '@Model.JiraTfsCustomFieldId'
            && (!isInMappings(availableFields.jiraFields[i].Key, 'jira') ||  availableFields.jiraFields[i].Key === 'defaultValue')) {
                var $option = $("<option>", { value: availableFields.jiraFields[i].Key }).text(availableFields.jiraFields[i].Value);
                $('#jirafields').append($option);
            }
        }
        for (var i = 0; i < availableFields.tfsFields.length; ++i) {
            if (availableFields.tfsFields[i].Key != '@Model.TfsJiraCustomFieldName'
                && (!isInMappings(availableFields.tfsFields[i].Key, 'tfs') || availableFields.tfsFields[i].Key === 'defaultValue')) {
                var $option = $("<option>", { value: availableFields.tfsFields[i].Key }).text(availableFields.tfsFields[i].Value);
                $('#tfsfields').append($option);
            }
        }
    }

    showMappings = function () {
        var txt = '';
        var issueTypeMappingHtmlElement = '';
        var statusMappingHtmlElement = '';
        var issueTypeMapping = null;
        var subtaskMapping = null;

        for (var i = 0; i < mappings.length; ++i) {
            if (mappings[i].jira === 'issuetype') {
                issueTypeMapping = mappings[i].id;
                var href = $("#fields-types").attr('href');
                if(href.toLowerCase().indexOf("&mappingid=") === -1 && href.toLowerCase().indexOf("&subtasks=") === -1 ){
                    $("#fields-types").attr('href', href + '&mappingid=' + issueTypeMapping + '&subtasks=false');
                }
                issueTypeMappingHtmlElement = '<li class="dynamic-content"><a href="' + location.href.replace('#/', '') + '&mappingid=' + mappings[i].id + '&subtasks=false" class="editmapping" id="editmapping' + mappings[i].id + '">Jira Issue Type/TFS Work Item Type</a></li>';
                window.Spartez.Shared.sendNotification('SetIssueTypeMappingId', {id: mappings[i].id });
            } else if (mappings[i].jira === '###TFS4JIRA###.JIRA.subtask.issuetype') {
                subtaskMapping = mappings[i].id;
            } else if (mappings[i].jira === '###TFS4JIRA###.JIRA.Status') {
                var stateMappingId = mappings[i].id;
                var href = $("#fields-states").attr('href');
                if(href.toLowerCase().indexOf("&mappingid=") === -1){
                    $("#fields-states").attr('href', href + '&mappingid=' + stateMappingId);
                }
            } else {
                var arrow = '';
                switch (mappings[i].direction) {
                    case 1:
                        arrow = '&lArr;';
                        break;
                    case 2:
                        arrow = '&rArr;';
                        break;
                    default:
                        arrow = '&hArr;';
                }
            }
        }

        $('#subtasksmapping').attr('href', location.href + '&mappingid=' + subtaskMapping);

        $('#attachmentmappingmode option[value="' + attachmentMapping + '"]').attr('selected', 'selected');
        $('#syncdirection option[value="' + syncDirection + '"]').attr('selected', 'selected');
        $('#commentsyncdirection option[value="' + commentMapping + '"]').attr('selected', 'selected');
        $('#remotelinksmappingmode option[value="' + remoteLinksMapping + '"]').attr('selected', 'selected');
        $('#subtasksyncdirection option[value="' + subtaskSyncDirection + '"]').attr('selected', 'selected');

        // Enable controls after mappings are loaded from server
        $('#syncdirection').removeAttr('disabled');
        $('#attachmentmappingmode').removeAttr('disabled');
        $('#subtasksyncdirection').removeAttr('disabled');

        if (attachmentMapping) {
            $('#attachmentmappingmode').parent().find('.attachments-info').fadeIn();
        } else {
            $('#attachmentmappingmode').parent().find('.attachments-info').fadeOut();
        }

        //console.log(data.result);
        $('#subtaskslinktype').html('');
        if (subtaskLinkTypes) {
            for (var i = 0; i < subtaskLinkTypes.length; ++i) {
                $('#subtaskslinktype').append($('<option/>').html(subtaskLinkTypes[i].reverse + ' -> ' + subtaskLinkTypes[i].forward).val(subtaskLinkTypes[i].referenceName));
            }
            if (i > 0) {
                $('#subtaskslinktype').attr('disabled', null);
            } else {
                $('#subtaskslinktype').attr('disabled', 'disabled');
            }
        }

        if (subtaskSyncDirection) {
            $('#subtasksyncdirection').parent().find('.subtasks-details').fadeIn();
        } else {
            $('#subtasksyncdirection').parent().find('.subtasks-details').fadeOut();
        }


        if (subtaskLinkType) {
            $('#subtaskslinktype option[value="' + subtaskLinkType + '"]').attr('selected', 'selected');
        }

        setHelpSizePos();

        jQuery.ajax({
            type: 'POST',
            url: '@Url.Action("GetJiraServerInfo", "Tfs")?_=' + new Date().getTime(),
            data: 'guid=@Model.Guid',
            success: function (data) {
                var info = jQuery.parseJSON(data.result);
                if (info && info.buildNumber && !isNaN(info.buildNumber) && (info.buildNumber >= 6252)) {
                    $('#commentsyncdirection').attr('disabled', null);
                    $('#commentsyncdirection').removeClass('disabled');
                    $('#commentsyncdirection').parent().find('div').hide();
                } else {
                    $('#commentsyncdirection').attr('disabled', 'disabled');
                    $('#commentsyncdirection').addClass('disabled');
                    $('#commentsyncdirection').parent().find('div').show();

                    // fix for users who have turned on comments synchronization in wizard
                    if ($('#commentsyncdirection').val() != 0) {
                        console.log("This is Jira version older than 6.2 - turning off comment synchronization");
                        $('#commentsyncdirection').val(0);
                        saveCommentSynchronizationDirection();
                    }
                }
            }
        });
    };

    getLinkTypes = function(callback) {
        jQuery.ajax({
            type: 'POST',
            url: '@Url.Action("GetLinkTypes", "Tfs")?_=' + new Date().getTime(),
            data: 'guid=@Model.Guid',
            success: function (data) {
                if (data.success) {
                    subtaskLinkTypes = data.result.linkTypes;
                    if (callback) callback();
                } else {
                    showErrorMessage(data.error);
                }
            },
            error: function (xhr) {
                console.log(xhr);
                showErrorMessage(getXhrErrorResponse(xhr));
            }
        });
    };

    getMappedFields = function () {
        jQuery.ajax({
            type: 'POST',
            url: '@Url.Action("getMappedFields", "Tfs")?_=' + new Date().getTime(),
            data: 'guid=@Model.Guid'
        }).success(function (data) {
            if (!data.success) {
                showErrorMessage(data.error);
                return;
            }

            mappings = data.result.mappings;
            getAllFields();
        }).fail(function(data){
            showErrorMessage(getXhrErrorResponse(xhr));
        });
    }

    getAllFields = function() {
        jQuery.ajax({
            type: 'POST',
            url: '@Url.Action("GetAllFields", "Tfs")?without-system-fields=true&_=' + new Date().getTime(),
            data: 'guid=@Model.Guid',
            success: function (data) {
                if (data.success) {
                    hideSpinner();
                    availableFields = {jiraFields: data.result.jirafields, tfsFields: data.result.tfsfields};
                    attachmentMapping = data.result.attachmentMapping ? data.result.attachmentMapping : 0;
                    syncDirection = data.result.syncDirection ? data.result.syncDirection : 3;
                    commentMapping = data.result.commentMapping ? data.result.commentMapping : 0;
                    remoteLinksMapping = data.result.remoteLinksMapping ? data.result.remoteLinksMapping : 0;
                    subtaskSyncDirection = data.result.subtaskMapping ? data.result.subtaskMapping : 0;
                    subtaskLinkType = data.result.subtaskLinkType;

                    if (subtaskLinkType === null && subtaskLinkTypes.length > 0) {
                        subtaskLinkType = subtaskLinkTypes[0].referenceName;
                        setSubtaskLinkType();
                    }

                    fillAvailableFields();
                    showMappings();
                } else {
                    showErrorMessage(data.error);
                }
            },
            error: function (xhr) {
                console.log(xhr);
                showErrorMessage(getXhrErrorResponse(xhr));
            }
        });
    }

    setSubtaskSyncDirection = function () {
        jQuery.ajax({
            type: 'POST',
            url: '@Url.Action("SetSubtaskSyncDirection", "Tfs")?_=' + new Date().getTime(),
            data: 'guid=@Model.Guid&subtasksyncdirection=' + $('#subtasksyncdirection').val(),
            success: function (data) {
                if (data.success) {
                    subtaskSyncDirection = data.result.subtaskMapping ? data.result.subtaskMapping : 0;
                    showMappings();
                } else {
                    showErrorMessage(data.error);
                }
            },
            error: function (xhr) {
                console.log(xhr);
                showErrorMessage(getXhrErrorResponse(xhr));
            }
        });
    }

    setSubtaskLinkType = function () {
        jQuery.ajax({
            type: 'POST',
            url: '@Url.Action("SetSubtaskLinkType", "Tfs")?_=' + new Date().getTime(),
            data: 'guid=@Model.Guid&subtasklinktype=' + subtaskLinkType,
            success: function (data) {
                if (data.success) {
                    subtaskLinkType = data.result.subtaskLinkType ? data.result.subtaskLinkType : 0;
                    showMappings();
                } else {
                    showErrorMessage(data.error);
                }
            },
            error: function (xhr) {
                console.log(xhr);
                showErrorMessage(getXhrErrorResponse(xhr));
            }
        });
    };

    $(document).on('click', '.updateDefaultValue', function (event) {
        var parent = $(event.target).parent();
        var input = $("input", parent);
        var newValue = input.val();
        var which = input.data("which");
        var mappingid = input.data("mappingid");
        jQuery.ajax({
            type: 'POST',
            url: '@Url.Action("SetFieldDefault", "Tfs")?_=' + new Date().getTime(),
            data: 'guid=@Model.Guid&what=' + which + '&value=' + newValue + '&mappingid=' + mappingid,
            success: function (data) {
                debugger;
                if (data.success) {

                } else {
                    showErrorMessage(data.error);
                }
            },
            error: function (xhr) {
                console.log(xhr);
                showErrorMessage(getXhrErrorResponse(xhr));
            }
        });;
    });

    $('#syncdirection').live('change', function () {
        jQuery.ajax({
            type: 'POST',
            url: '@Url.Action("SetSyncDirection", "Tfs")?_=' + new Date().getTime(),
            data: 'guid=@Model.Guid&syncdirection=' + $('#syncdirection').val(),
            success: function (data) {
                if (data.success) {
                    syncDirection = data.result.syncDirection ? data.result.syncDirection : 3;
                    showMappings();
                } else {
                    showErrorMessage(data.error);
                }
            },
            error: function (xhr) {
                console.log(xhr);
                showErrorMessage(getXhrErrorResponse(xhr));
            }
        });
    });

    $('#subtasksyncdirection').live('change', function () {
        var val = $('#subtasksyncdirection').val();
        if (val > 0) {
            $('#subtasksyncdirection').parent().find('.subtasks-details').fadeIn();
        } else {
            $('#subtasksyncdirection').parent().find('.subtasks-details').fadeOut();
        }
    });

    function saveCommentSynchronizationDirection() {
        jQuery.ajax({
            type: 'POST',
            url: '@Url.Action("SetCommentSyncDirection", "Tfs")?_=' + new Date().getTime(),
            data: 'guid=@Model.Guid&commentsyncdirection=' + $('#commentsyncdirection').val(),
            success: function (data) {
                if (data.success) {
                    //console.log(data, data.result.commentMapping);
                    commentMapping = data.result.commentMapping ? data.result.commentMapping : 0;
                    showMappings();
                } else {
                    showErrorMessage(data.error);
                }
            },
            error: function (xhr) {
                console.log(xhr);
                showErrorMessage(getXhrErrorResponse(xhr));
            }
        });
    };
    $('#commentsyncdirection').live('change', saveCommentSynchronizationDirection);

    $('#subtasksyncdirection').live('change', function () {
        setSubtaskSyncDirection();
    });

    $('#subtaskslinktype').live('change', function () {
        subtaskLinkType = $('#subtaskslinktype').val();
        setSubtaskLinkType();
    });

    $('#attachmentmappingmode').live('change', function() {
        jQuery.ajax({
            type: 'POST',
            url: '@Url.Action("SetAttachmentMappingMode", "Tfs")?_=' + new Date().getTime(),
            data: 'guid=@Model.Guid&attachmentmappingmode=' + $('#attachmentmappingmode').val(),
            success: function (data) {
                if (data.success) {
                    attachmentMapping = data.result.attachmentMapping ? data.result.attachmentMapping : 0;
                    showMappings();
                } else {
                    showErrorMessage(data.error);
                }
            },
            error: function (xhr) {
                console.log(xhr);
                showErrorMessage(getXhrErrorResponse(xhr));
            }
        });
    });

    $('#remotelinksmappingmode').live('change', function() {
        jQuery.ajax({
            type: 'POST',
            url: '@Url.Action("SetRemoteLinksMappingMode", "Tfs")?_=' + new Date().getTime(),
            data: 'guid=@Model.Guid&remoteLinksMappingMode=' + $('#remotelinksmappingmode').val(),
            success: function (data) {
                if (data.success) {
                    remoteLinksMapping = data.result.remoteLinksMapping ? data.result.remoteLinksMapping : 0;
                    showMappings();
                } else {
                    showErrorMessage(data.error);
                }
            },
            error: function (xhr) {
                console.log(xhr);
                showErrorMessage(getXhrErrorResponse(xhr));
            }
        });
    });

    $(document).ready(function() {
        fillHelp('#tfsfmehelp');
        $("#tabcontent").addClass("loading");
        showSpinner();
    });

    getLinkTypes(getMappedFields);
</script>          