@using SpartezSoftware.Synchronizer.Controllers
@using SpartezSoftware.Synchronizer.Services
@{    
    string id = @Model.GetType().GetProperty("Id").GetValue(Model);
    string mappingComponentId = id + "-component";
}

<div id="@id" class="@Model.GetType().GetProperty("Class").GetValue(Model)">
    <h1>Field Mapping</h1>
    @if (Model.GetType().GetProperty("Guid") != null && @Model.GetType().GetProperty("Guid").GetValue(Model).ToString() != "00000000-0000-0000-0000-000000000000")
    {
        <div class="vue-container" id="@mappingComponentId">
            <fields-mapping load-on-init="true" is-wizard-view="true" profile-guid="@Model.GetType().GetProperty("Guid").GetValue(Model).ToString()"></fields-mapping>
        </div>
    }
    @*@MappingHelpers.MappingComponent(@mappingComponentId)*@
</div>

<script>
    $(function () {
        var $root = $('#@id');
        var $mapping = $root.find("#@mappingComponentId");

        var possibleJiraValues;
        var possibleTfsValues;
        var mappedValues;

        $root.on("@NavigationEvents.ActivateView", function activateView(event, parameters) {
            window.Spartez.Shared.sendNotification('RefreshFieldsMappingComponent', {});
            @*showSpinner();

            var possibleFieldsLoader = nonBlockingAjax({
                url: '@Url.Action("GetAllFields", "Tfs")?without-system-fields=true&_=' + new Date().getTime(),
                data: 'guid=' + synchronizationProfile.Guid
            });

            var mappedFieldsLoader = nonBlockingAjax({
                url: '@Url.Action("getMappedFields", "Tfs")?_=' + new Date().getTime(),
                data: 'guid=' + synchronizationProfile.Guid
            });

            possibleFieldsLoader.then(parsePossibleFields);
            mappedFieldsLoader.then(parseMappings);

            $.when(possibleFieldsLoader, mappedFieldsLoader).then(function () {
                var mappingOptions = {
                    possibleJiraValues: possibleJiraValues,
                    possibleTfsValues: possibleTfsValues,
                    mappedValues: mappedValues,
                    showFallbackSelects: false,
                    showEditButtons: true
                }

                $mapping.trigger('@MappingEvents.Init', mappingOptions);
                hideSpinner();
            });*@
        });

        $root.on("@NavigationEvents.NextButtonClicked", async function () {
            let goToUserMappingStep = await shouldGoToUserMappingStep();
            if (goToUserMappingStep) {
                SaveModelAndGoToNextStep();
            } else {
                let indexOfStepJustAfterUsersMapping = getStepIndexInStepsList(currentStep) + 2
                SaveModelAndGoToStepWithIndex(indexOfStepJustAfterUsersMapping);
            }
        });

        @*$mapping.on("@MappingEvents.AddMappingButtonClicked", function (event, mappedValue) {
            nonBlockingAjax({
                url: '@Url.Action("MapFields", "Tfs")?_=' + new Date().getTime(),
                data: { guid: synchronizationProfile.Guid, jira: mappedValue.jiraId, tfs: mappedValue.tfsId }
            }).done(function (data) {
                var mapping = _.findWhere(data.mappings, { id: data.newMappingId });
                data.mappedValue = parseSingleMapping(mapping);

                $mapping.trigger('@MappingEvents.AddMapping', data);
            });
        });

        $mapping.on("@MappingEvents.RemoveMappingButtonClicked", function (event, mappedValue) {
            nonBlockingAjax({
                url: '@Url.Action("UnmapFields", "Tfs")?_=' + new Date().getTime(),
                data: { guid: synchronizationProfile.Guid, id: mappedValue.mappingId }
            }).done(function (data) {
                data.mappedValue = mappedValue;
                $mapping.trigger('@MappingEvents.RemoveMapping', data);
            });
        });*@

        $mapping.on("@MappingEvents.EditMappingButtonClicked", function (event, mappedValue) {
            SaveModelAndGoToSideStep("@WizardStep.ValuesMapping", mappedValue.mappingId);
        });

        function parsePossibleFields(data) {
            var filteredJiraFields = _.filter(data.jirafields, function (field) {
                return field.Key !== synchronizationProfile.JiraTfsCustomFieldId;
            });

            var filteredTfsFields = _.filter(data.tfsfields, function (field) {
                return (synchronizationProfile.UseTfsHistory) || (field.Key !== synchronizationProfile.TfsJiraCustomFieldName);
            });

            possibleJiraValues = _.map(filteredJiraFields, function (field) {
                return { text: field.Value, id: field.Key };
            });

            possibleTfsValues = _.map(filteredTfsFields, function (field) {
                return { text: field.Value, id: field.Key };
            });
        }

        function parseMappings(data) {
            var filteredMappings = _.filter(data.mappings, function (mapping) {
                return mapping.jira !== '@SyncProfileService.JiraStatusField' &&
                        mapping.jira !== '@SyncProfileService.JiraIssueTypeField' &&
                        mapping.jira !== '@SyncProfileService.JiraIssueTypeSubtaskField';
            });

            mappedValues = _.map(filteredMappings, parseSingleMapping);
        }

        function parseSingleMapping(mapping) {
            return {
                jiraId: mapping.jira,
                tfsId: mapping.tfs,
                mappingId: mapping.id,
                direction: getSynchronizationDirection(mapping.direction),
                jiraHelp: getMappingHelpForJiraField(mapping),
                tfsHelp: getMappingHelpForTfsField(mapping),
                jiraType: mapping.jiraType,
                jiraCustomFieldName: mapping.jiraCustomFieldName,
                showActiveEditButton: mapping.needsAttention,
                editTooltip: mapping.needsAttention ? ('No values are currently mapped - define them using this button.') : (''),
                directionTooltip: getDirectionTooltipForMapping(mapping)
            };
        }

        function getDirectionTooltipForMapping(mapping) {
            switch (getSynchronizationDirection(mapping.direction)) {
            case MappingDirection.FROM_TFS_TO_JIRA:
                return 'This field will be synchronized in direction from TFS to JIRA.';
            case MappingDirection.FROM_JIRA_TO_TFS:
                return 'This field will be synchronized in direction from JIRA to TFS.';
            case MappingDirection.BOTH_DIRECTIONS:
                return 'This field will be synchronized in both directions.';
            case MappingDirection.CONFLICT:
                return 'This field will not be synchronized because synchronization direction of this field is opposite to profile level settings.';
            }
        }

        function getMappingHelpForJiraField(mapping) {
            if (mapping.jira.indexOf('timetracking') === 0) {
                return '<ul>' +
                    '<li>For Time Tracking fields in TFS type of <b>double</b> should be used. We assume that time in this fields will be stored in <b>hours</b>.</li>' +
                    '<li><b>Logged time</b> in JIRA cannot be decreased so value of Logged Time in TFS that is lower than JIRA Logged Time won\'t be synchronized.</li>' +
                    '<li>For best results <b>Original Estimate</b> and <b>Remaining Estimate</b> fields should be synchronized in pair or none at all because ' +
                    'not synchronized field will be set to the same value as synchronized field anyway (but only in JIRA).</li>' +
                    '</ul>';
            }

            if (mapping.jira.indexOf("project") === 0) {
                return 'Mapping of the <strong>Project</strong> JIRA field is not recommended. ' +
                    'If you do use it, always map it to a TFS field containing a JIRA project key.<br><br>' +
                    "<strong>This field must never be used with bi-directional synchronization, because it interferes with the Synchronizer's ability to find updated JIRA issues.</strong>";
            }

            if (mapping.jiraType === "user") {
                return 'User fields, such as <strong>assignee</strong> can be automatically mapped in JIRA and TFS, ' +
                    'provided that both JIRA and TFS server are connected to the same Active Directory instance and therefore share their user account data. ' +
                    'If this is not the case, please use the "Map Values" option';
            }

            if (mapping.jira === "@SyncProfileService.JiraResolutionField") {
                return 'In most of the cases Jira <strong>Resolution</strong> field should be mapped to TFS <strong>Resolved Reason</strong> field - please ' +
                       '<a href="https://confluence.spartez-software.com/display/TFS4JIRA/TFS4JIRA+FAQ#TFS4JIRAFAQ-TowhichfieldinTFSshouldImapJiraResolutionfield?" target="_blank">refer to the documentation</a> for more informations.';
            }

            return null;
        }

        function getMappingHelpForTfsField(mapping) {
            if (mapping.tfs === "@SyncProfileService.TfsTagsField") {
                return "Tags field can be updated remotely since TFS 2013 Update 2 so in earlier versions of TFS this field won't be updated.";
            }

            return null;
        }
    })
</script>